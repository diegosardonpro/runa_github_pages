# src/db_manager.py (v9.0 - Final Schema)
import os
import time
import psycopg2
from supabase import create_client, Client

# --- CONSTANTES DE TABLAS ---
URLS_TABLE = 'urls_para_procesar'
ASSETS_TABLE = 'activos'
IMAGES_TABLE = 'imagenes'

# --- INFRAESTRUCTURA COMO CÓDIGO (IaC) v9.0 ---
SCHEMA_SQL = f"""
-- Eliminar todas las tablas y vistas antiguas para un estado limpio
DROP VIEW IF EXISTS public.vista_activos_con_imagenes CASCADE;
DROP TABLE IF EXISTS public.encuestas_anonimas CASCADE;
DROP TABLE IF EXISTS public.ejecuciones_log CASCADE;
DROP TABLE IF EXISTS public.imagenes_curadas CASCADE;
DROP TABLE IF EXISTS public.imagenes CASCADE;
DROP TABLE IF EXISTS public.activos_curados CASCADE;
DROP TABLE IF EXISTS public.activos CASCADE;
DROP TABLE IF EXISTS public.urls_para_procesar CASCADE;

-- Crear la estructura de tablas final y optimizada
CREATE TABLE IF NOT EXISTS public.{URLS_TABLE} (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    url text NOT NULL UNIQUE,
    estado text DEFAULT 'pendiente' NOT NULL,
    intentos smallint DEFAULT 0 NOT NULL,
    ultimo_error text
);

CREATE TABLE IF NOT EXISTS public.{ASSETS_TABLE} (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    source_url_id bigint REFERENCES public.{URLS_TABLE}(id) ON DELETE SET NULL,
    asset_type text NOT NULL,
    estado_curacion text DEFAULT 'iniciado' NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    url_original text NOT NULL,
    titulo text,
    resumen text,
    contenido_html text,
    tags text
);

CREATE TABLE IF NOT EXISTS public.{IMAGES_TABLE} (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    asset_id bigint NOT NULL REFERENCES public.{ASSETS_TABLE}(id) ON DELETE CASCADE,
    url_original_imagen text NOT NULL,
    ruta_local text,
    url_almacenamiento text,
    tags_visuales_ia text,
    descripcion_ia text,
    orden_aparicion smallint
);
"""

def get_supabase_client(logger):
    url = os.getenv('SUPABASE_URL')
    key = os.getenv('SUPABASE_SERVICE_KEY')
    if not url or not key: 
        logger.error("Secretos SUPABASE_URL o SUPABASE_SERVICE_KEY no encontrados.")
        raise ValueError("Secretos de Supabase no encontrados.")
    return create_client(url, key)

def setup_database_schema(supabase: Client, logger):
    logger.info("Iniciando configuración de schema de base de datos v9.1 (Final Simplificado)...")
    try:
        logger.info("Ejecutando SQL para resetear y crear el schema final...")
        supabase.rpc('eval', {'query': SCHEMA_SQL}).execute()
        logger.info("Schema v9.1 (re)creado con éxito.")
    except Exception as e:
        logger.error(f"Error al configurar el schema de la BD: {e}", exc_info=True)
        raise