# src/db_manager.py
import os
import uuid
from supabase import create_client, Client

# --- INFRAESTRUCTURA COMO CÓDIGO (IaC) ---
URLS_TABLE = 'urls_para_procesar'
ASSETS_TABLE = 'activos_curados'
SURVEYS_TABLE = 'encuestas_anonimas'

SCHEMA_SQL = f'''
CREATE TABLE IF NOT EXISTS public.{URLS_TABLE} (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    url text NOT NULL UNIQUE,
    estado text DEFAULT 'pendiente' NOT NULL,
    intentos smallint DEFAULT 0 NOT NULL,
    ultimo_error text
);
CREATE TABLE IF NOT EXISTS public.{ASSETS_TABLE} (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    url_original text NOT NULL,
    titulo text,
    resumen text,
    contenido_html text,
    tags text,
    ruta_imagen_local text,
    url_imagen_original text
);
CREATE TABLE IF NOT EXISTS public.{SURVEYS_TABLE} (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    asset_id bigint REFERENCES public.{ASSETS_TABLE}(id) ON DELETE SET NULL,
    tipo_dispositivo text,
    rango_edad text,
    nivel_confianza_digital integer,
    limites_acceso text
);
'''

# --- FUNCIONES DE GESTIÓN DE BASE DE DATOS ---
def get_supabase_client(logger):
    url = os.getenv('SUPABASE_URL')
    key = os.getenv('SUPABASE_SERVICE_KEY')
    if not url or not key: 
        logger.error("Secretos SUPABASE_URL o SUPABASE_SERVICE_KEY no encontrados.")
        raise ValueError("Secretos de Supabase no encontrados.")
    logger.info("Cliente de Supabase para manipulación de datos creado.")
    return create_client(url, key)

def setup_database_schema(supabase: Client, logger):
    logger.info("Verificando/creando schema de base de datos...")
    try:
        function_name = f'setup_schema_{str(uuid.uuid4()).replace("-", "")}'
        sql_function = f'CREATE OR REPLACE FUNCTION {function_name}() RETURNS void AS $$ BEGIN {SCHEMA_SQL.replace("\n", " ")} END; $$ LANGUAGE plpgsql;'
        
        supabase.rpc('eval', {{'query': sql_function}}).execute()
        supabase.rpc(function_name, {{}}).execute()
        supabase.rpc('eval', {{'query': f'DROP FUNCTION {function_name};'}}).execute()
        
        logger.info("Schema de la base de datos verificado/creado con éxito.")
    except Exception as e:
        if "already exists" in str(e):
            logger.info("Las tablas ya existen, no se requiere ninguna acción.")
        else:
            logger.error(f"Error al configurar el schema de la BD: {e}", exc_info=True)
            raise
