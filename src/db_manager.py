# src/db_manager.py (v5.0 - Schema Refactor)
import os
from supabase import create_client, Client
import time
import psycopg2

# --- CONSTANTES DE TABLAS ---
URLS_TABLE = 'urls_para_procesar'
ASSETS_TABLE = 'activos'  # Tabla principal ahora unificada
IMAGES_TABLE = 'imagenes' # Tabla de imágenes simplificada
LOGS_TABLE = 'ejecuciones_log'

# --- INFRAESTRUCTURA COMO CÓDIGO (IaC) v5.0 ---
SCHEMA_SQL = f"""
-- Eliminar tablas antiguas en el orden correcto para evitar errores de dependencias
DROP TABLE IF EXISTS public.metadata_imagenes CASCADE;
DROP TABLE IF EXISTS public.metadata_articulos CASCADE;
DROP TABLE IF EXISTS public.activos CASCADE;
DROP TABLE IF EXISTS public.urls_para_procesar CASCADE;
DROP TABLE IF EXISTS public.ejecuciones_log CASCADE;

-- Crear tablas con la nueva estructura optimizada
CREATE TABLE IF NOT EXISTS public.{URLS_TABLE} (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    url text NOT NULL UNIQUE,
    estado text DEFAULT 'pendiente' NOT NULL,
    intentos smallint DEFAULT 0 NOT NULL,
    ultimo_error text
);

CREATE TABLE IF NOT EXISTS public.{ASSETS_TABLE} (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    source_url_id bigint REFERENCES public.{URLS_TABLE}(id) ON DELETE SET NULL,
    asset_type text NOT NULL,
    estado_curacion text DEFAULT 'iniciado' NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    url_original text NOT NULL,
    -- Campos fusionados de metadata_articulos
    titulo text,
    resumen text,
    contenido_html text,
    tags text
);

CREATE TABLE IF NOT EXISTS public.{IMAGES_TABLE} (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    asset_id bigint NOT NULL REFERENCES public.{ASSETS_TABLE}(id) ON DELETE CASCADE,
    url_original_imagen text NOT NULL,
    ruta_local text,
    url_almacenamiento text,
    tags_visuales_ia text,
    descripcion_ia text,
    orden_aparicion smallint
);

CREATE TABLE IF NOT EXISTS public.{LOGS_TABLE} (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    run_id text NOT NULL,
    start_time timestamptz DEFAULT now() NOT NULL,
    end_time timestamptz,
    estado text DEFAULT 'iniciado' NOT NULL,
    urls_procesadas integer DEFAULT 0,
    resumen_resultado text
);
"""

# --- FUNCIONES DE GESTIÓN DE BASE DE DATOS ---

def get_supabase_client(logger):
    url = os.getenv('SUPABASE_URL')
    key = os.getenv('SUPABASE_SERVICE_KEY')
    if not url or not key: 
        logger.error("Secretos SUPABASE_URL o SUPABASE_SERVICE_KEY no encontrados.")
        raise ValueError("Secretos de Supabase no encontrados.")
    logger.info("Cliente de Supabase para manipulación de datos creado.")
    return create_client(url, key)

def setup_database_schema(logger):
    logger.info("Iniciando configuración de schema de base de datos v5.0...")
    conn = None
    last_exception = None
    for attempt in range(3):
        try:
            conn_string = os.getenv('SUPABASE_CONNECTION_STRING')
            if not conn_string:
                raise ValueError("El secreto SUPABASE_CONNECTION_STRING no fue encontrado.")
            
            logger.info(f"Conectando a la base de datos (Intento {attempt + 1}/3)...")
            conn = psycopg2.connect(conn_string)
            cursor = conn.cursor()
            logger.info("Ejecutando SQL para resetear y crear el schema...")
            cursor.execute(SCHEMA_SQL)
            conn.commit()
            logger.info("Schema v5.0 (re)creado con éxito.")
            return
        except psycopg2.OperationalError as e:
            logger.warning(f"Intento {attempt + 1} fallido: La base de datos podría estar despertando. Reintentando en 5 segundos...")
            last_exception = e
            time.sleep(5)
        except Exception as e:
            logger.error(f"Error al configurar el schema de la BD: {e}", exc_info=True)
            raise
        finally:
            if conn: conn.close()
    if last_exception: raise last_exception

def update_asset_with_metadata(supabase: Client, logger, asset_id: int, metadata: dict):
    logger.info(f"Actualizando Asset ID {asset_id} con metadatos...")
    try:
        metadata.pop('urls_imagenes', None)
        supabase.table(ASSETS_TABLE).update(metadata).eq('id', asset_id).execute()
    except Exception as e:
        logger.error(f"Error al actualizar el activo: {e}", exc_info=True)
        raise

# El resto de funciones como save_image_metadata, etc. se mantienen igual pero apuntando a las nuevas tablas
